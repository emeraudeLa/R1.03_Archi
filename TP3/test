;; Exercice 2.1 : Recopie d’un texte
main:
            LD  R0, 11
            OUT R0, 255
loop:       CALL getchar
            CMP R0, 10  ; Vérifie si c == '\n'
            BEQ end
            CALL toUpper
            CALL putchar
            JMP loop
end:        HLT

toUpper:
            CMP R0, 'a'
            BHS not_lowercase
            CMP R0, 'z'
            BLS not_lowercase
            AND R0, %11011111
not_lowercase:
            RET

getchar:    IN  R0, 11
            RET
putchar:    OUT R0, 11
            RET

;; Exercice 2.2 : Fibonacci V1
F:
            CMP R0, 0
            BEQ endF
            CMP R0, 1
            BEQ endF
            PUSH R0
            DEC R0
            CALL F
            PUSH R0
            POP R1
            DEC R1
            CALL F
            ADD R0, R1
            POP R1
endF:       RET

;; Exercice 3.2 : Fonction puts
puts:
            PUSH R1
.loop:
            LD  R1, [R0]
            CMP R1, 0
            BEQ .end
            OUT R1, 11
            INC R0
            JMP .loop
.end:
            POP R1
            RET

;; Exercice 3.3 : Dessiner une chenille
dessiner:
            PUSH R1
            PUSH R2
            LD  R1, 0
loop_dessiner:
            CMP R1, 4
            BGE end_dessiner
            LD  R2, [R0+R1]
            OUT R2, 8
            INC R1
            JMP loop_dessiner
end_dessiner:
            POP R2
            POP R1
            RET

;; Exercice 3.4 : Fibonacci V2 avec mémorisation
F_mem:      DB 0, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
F_memo:
            PUSH R1
            LD  R1, [R0+F_mem]
            CMP R1, 255
            BNE .return_mem
            PUSH R0
            DEC R0
            CALL F_memo
            PUSH R0
            POP R1
            DEC R1
            CALL F_memo
            ADD R0, R1
            POP R1
            LD  [R1+F_mem], R0
.return_mem:
            LD  R0, R1
            POP R1
            RET
